
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils import executor
import openai
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(KeyboardButton("üß† –†–∞–∑–æ–±—Ä–∞—Ç—å –∏–¥–µ—é"), KeyboardButton("üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏"))
main_keyboard.add(KeyboardButton("üåê –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ"), KeyboardButton("üìã –ü–æ–º–æ—â—å"))

user_tasks = {}

@dp.message_handler(commands=['start'])
async def send_welcome(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –∑–∞–π–º–µ–º—Å—è?", reply_markup=main_keyboard)

@dp.message_handler(lambda message: message.text == "üß† –†–∞–∑–æ–±—Ä–∞—Ç—å –∏–¥–µ—é")
async def analyze_idea(message: Message):
    await message.reply("–û–ø–∏—à–∏ –∏–¥–µ—é –∏–ª–∏ –≥–∏–ø–æ—Ç–µ–∑—É ‚Äî —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å –µ—ë –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –º—ã—à–ª–µ–Ω–∏—é.")

@dp.message_handler(lambda message: message.text == "üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def show_tasks(message: Message):
    user_id = message.from_user.id
    tasks = user_tasks.get(user_id, [])
    if not tasks:
        await message.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        task_list = "\n".join(f"‚Äî {task}" for task in tasks)
        await message.reply(f"–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n{task_list}")

@dp.message_handler(lambda message: message.text == "üåê –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ")
async def ask_web(message: Message):
    await message.reply("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏? –ù–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")

@dp.message_handler(lambda message: message.text == "üìã –ü–æ–º–æ—â—å")
async def help_menu(message: Message):
    await message.reply("–Ø –º–æ–≥—É:\n‚Äî –†–∞–∑–±–∏—Ä–∞—Ç—å –∏–¥–µ–∏\n‚Äî –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n‚Äî –í–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n–ü–∏—à–∏ –ª—é–±—É—é –≥–∏–ø–æ—Ç–µ–∑—É, –∏ –º—ã —Ä–∞–∑–±–µ—Ä—ë–º –µ—ë.")

@dp.message_handler()
async def handle_general(message: Message):
    user_id = message.from_user.id
    user_tasks.setdefault(user_id, []).append(message.text)
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –≤ —Å—Ç–∏–ª–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è. –ü–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—É—é –∏–¥–µ—é."},
            {"role": "user", "content": message.text}
        ]
    )
    await message.reply(response['choices'][0]['message']['content'])

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
